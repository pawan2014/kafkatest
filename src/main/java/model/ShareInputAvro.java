/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package model;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class ShareInputAvro extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4424701868344903975L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ShareInputAvro\",\"namespace\":\"model\",\"fields\":[{\"name\":\"transcationId\",\"type\":[\"null\",\"string\"]},{\"name\":\"shareId\",\"type\":[\"null\",\"string\"]},{\"name\":\"type\",\"type\":[\"null\",\"string\"]},{\"name\":\"cost\",\"type\":[\"null\",\"int\"]},{\"name\":\"units\",\"type\":[\"null\",\"int\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ShareInputAvro> ENCODER =
      new BinaryMessageEncoder<ShareInputAvro>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ShareInputAvro> DECODER =
      new BinaryMessageDecoder<ShareInputAvro>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<ShareInputAvro> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<ShareInputAvro> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<ShareInputAvro> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<ShareInputAvro>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this ShareInputAvro to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a ShareInputAvro from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a ShareInputAvro instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static ShareInputAvro fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence transcationId;
  @Deprecated public java.lang.CharSequence shareId;
  @Deprecated public java.lang.CharSequence type;
  @Deprecated public java.lang.Integer cost;
  @Deprecated public java.lang.Integer units;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ShareInputAvro() {}

  /**
   * All-args constructor.
   * @param transcationId The new value for transcationId
   * @param shareId The new value for shareId
   * @param type The new value for type
   * @param cost The new value for cost
   * @param units The new value for units
   */
  public ShareInputAvro(java.lang.CharSequence transcationId, java.lang.CharSequence shareId, java.lang.CharSequence type, java.lang.Integer cost, java.lang.Integer units) {
    this.transcationId = transcationId;
    this.shareId = shareId;
    this.type = type;
    this.cost = cost;
    this.units = units;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return transcationId;
    case 1: return shareId;
    case 2: return type;
    case 3: return cost;
    case 4: return units;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: transcationId = (java.lang.CharSequence)value$; break;
    case 1: shareId = (java.lang.CharSequence)value$; break;
    case 2: type = (java.lang.CharSequence)value$; break;
    case 3: cost = (java.lang.Integer)value$; break;
    case 4: units = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'transcationId' field.
   * @return The value of the 'transcationId' field.
   */
  public java.lang.CharSequence getTranscationId() {
    return transcationId;
  }


  /**
   * Sets the value of the 'transcationId' field.
   * @param value the value to set.
   */
  public void setTranscationId(java.lang.CharSequence value) {
    this.transcationId = value;
  }

  /**
   * Gets the value of the 'shareId' field.
   * @return The value of the 'shareId' field.
   */
  public java.lang.CharSequence getShareId() {
    return shareId;
  }


  /**
   * Sets the value of the 'shareId' field.
   * @param value the value to set.
   */
  public void setShareId(java.lang.CharSequence value) {
    this.shareId = value;
  }

  /**
   * Gets the value of the 'type' field.
   * @return The value of the 'type' field.
   */
  public java.lang.CharSequence getType() {
    return type;
  }


  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public void setType(java.lang.CharSequence value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'cost' field.
   * @return The value of the 'cost' field.
   */
  public java.lang.Integer getCost() {
    return cost;
  }


  /**
   * Sets the value of the 'cost' field.
   * @param value the value to set.
   */
  public void setCost(java.lang.Integer value) {
    this.cost = value;
  }

  /**
   * Gets the value of the 'units' field.
   * @return The value of the 'units' field.
   */
  public java.lang.Integer getUnits() {
    return units;
  }


  /**
   * Sets the value of the 'units' field.
   * @param value the value to set.
   */
  public void setUnits(java.lang.Integer value) {
    this.units = value;
  }

  /**
   * Creates a new ShareInputAvro RecordBuilder.
   * @return A new ShareInputAvro RecordBuilder
   */
  public static model.ShareInputAvro.Builder newBuilder() {
    return new model.ShareInputAvro.Builder();
  }

  /**
   * Creates a new ShareInputAvro RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ShareInputAvro RecordBuilder
   */
  public static model.ShareInputAvro.Builder newBuilder(model.ShareInputAvro.Builder other) {
    if (other == null) {
      return new model.ShareInputAvro.Builder();
    } else {
      return new model.ShareInputAvro.Builder(other);
    }
  }

  /**
   * Creates a new ShareInputAvro RecordBuilder by copying an existing ShareInputAvro instance.
   * @param other The existing instance to copy.
   * @return A new ShareInputAvro RecordBuilder
   */
  public static model.ShareInputAvro.Builder newBuilder(model.ShareInputAvro other) {
    if (other == null) {
      return new model.ShareInputAvro.Builder();
    } else {
      return new model.ShareInputAvro.Builder(other);
    }
  }

  /**
   * RecordBuilder for ShareInputAvro instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ShareInputAvro>
    implements org.apache.avro.data.RecordBuilder<ShareInputAvro> {

    private java.lang.CharSequence transcationId;
    private java.lang.CharSequence shareId;
    private java.lang.CharSequence type;
    private java.lang.Integer cost;
    private java.lang.Integer units;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(model.ShareInputAvro.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.transcationId)) {
        this.transcationId = data().deepCopy(fields()[0].schema(), other.transcationId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.shareId)) {
        this.shareId = data().deepCopy(fields()[1].schema(), other.shareId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.type)) {
        this.type = data().deepCopy(fields()[2].schema(), other.type);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.cost)) {
        this.cost = data().deepCopy(fields()[3].schema(), other.cost);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.units)) {
        this.units = data().deepCopy(fields()[4].schema(), other.units);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing ShareInputAvro instance
     * @param other The existing instance to copy.
     */
    private Builder(model.ShareInputAvro other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.transcationId)) {
        this.transcationId = data().deepCopy(fields()[0].schema(), other.transcationId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.shareId)) {
        this.shareId = data().deepCopy(fields()[1].schema(), other.shareId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.type)) {
        this.type = data().deepCopy(fields()[2].schema(), other.type);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.cost)) {
        this.cost = data().deepCopy(fields()[3].schema(), other.cost);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.units)) {
        this.units = data().deepCopy(fields()[4].schema(), other.units);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'transcationId' field.
      * @return The value.
      */
    public java.lang.CharSequence getTranscationId() {
      return transcationId;
    }


    /**
      * Sets the value of the 'transcationId' field.
      * @param value The value of 'transcationId'.
      * @return This builder.
      */
    public model.ShareInputAvro.Builder setTranscationId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.transcationId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'transcationId' field has been set.
      * @return True if the 'transcationId' field has been set, false otherwise.
      */
    public boolean hasTranscationId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'transcationId' field.
      * @return This builder.
      */
    public model.ShareInputAvro.Builder clearTranscationId() {
      transcationId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'shareId' field.
      * @return The value.
      */
    public java.lang.CharSequence getShareId() {
      return shareId;
    }


    /**
      * Sets the value of the 'shareId' field.
      * @param value The value of 'shareId'.
      * @return This builder.
      */
    public model.ShareInputAvro.Builder setShareId(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.shareId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'shareId' field has been set.
      * @return True if the 'shareId' field has been set, false otherwise.
      */
    public boolean hasShareId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'shareId' field.
      * @return This builder.
      */
    public model.ShareInputAvro.Builder clearShareId() {
      shareId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'type' field.
      * @return The value.
      */
    public java.lang.CharSequence getType() {
      return type;
    }


    /**
      * Sets the value of the 'type' field.
      * @param value The value of 'type'.
      * @return This builder.
      */
    public model.ShareInputAvro.Builder setType(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.type = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'type' field.
      * @return This builder.
      */
    public model.ShareInputAvro.Builder clearType() {
      type = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'cost' field.
      * @return The value.
      */
    public java.lang.Integer getCost() {
      return cost;
    }


    /**
      * Sets the value of the 'cost' field.
      * @param value The value of 'cost'.
      * @return This builder.
      */
    public model.ShareInputAvro.Builder setCost(java.lang.Integer value) {
      validate(fields()[3], value);
      this.cost = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'cost' field has been set.
      * @return True if the 'cost' field has been set, false otherwise.
      */
    public boolean hasCost() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'cost' field.
      * @return This builder.
      */
    public model.ShareInputAvro.Builder clearCost() {
      cost = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'units' field.
      * @return The value.
      */
    public java.lang.Integer getUnits() {
      return units;
    }


    /**
      * Sets the value of the 'units' field.
      * @param value The value of 'units'.
      * @return This builder.
      */
    public model.ShareInputAvro.Builder setUnits(java.lang.Integer value) {
      validate(fields()[4], value);
      this.units = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'units' field has been set.
      * @return True if the 'units' field has been set, false otherwise.
      */
    public boolean hasUnits() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'units' field.
      * @return This builder.
      */
    public model.ShareInputAvro.Builder clearUnits() {
      units = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ShareInputAvro build() {
      try {
        ShareInputAvro record = new ShareInputAvro();
        record.transcationId = fieldSetFlags()[0] ? this.transcationId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.shareId = fieldSetFlags()[1] ? this.shareId : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.type = fieldSetFlags()[2] ? this.type : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.cost = fieldSetFlags()[3] ? this.cost : (java.lang.Integer) defaultValue(fields()[3]);
        record.units = fieldSetFlags()[4] ? this.units : (java.lang.Integer) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ShareInputAvro>
    WRITER$ = (org.apache.avro.io.DatumWriter<ShareInputAvro>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ShareInputAvro>
    READER$ = (org.apache.avro.io.DatumReader<ShareInputAvro>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.transcationId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.transcationId);
    }

    if (this.shareId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.shareId);
    }

    if (this.type == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.type);
    }

    if (this.cost == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.cost);
    }

    if (this.units == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.units);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.transcationId = null;
      } else {
        this.transcationId = in.readString(this.transcationId instanceof Utf8 ? (Utf8)this.transcationId : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.shareId = null;
      } else {
        this.shareId = in.readString(this.shareId instanceof Utf8 ? (Utf8)this.shareId : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.type = null;
      } else {
        this.type = in.readString(this.type instanceof Utf8 ? (Utf8)this.type : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.cost = null;
      } else {
        this.cost = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.units = null;
      } else {
        this.units = in.readInt();
      }

    } else {
      for (int i = 0; i < 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.transcationId = null;
          } else {
            this.transcationId = in.readString(this.transcationId instanceof Utf8 ? (Utf8)this.transcationId : null);
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.shareId = null;
          } else {
            this.shareId = in.readString(this.shareId instanceof Utf8 ? (Utf8)this.shareId : null);
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.type = null;
          } else {
            this.type = in.readString(this.type instanceof Utf8 ? (Utf8)this.type : null);
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.cost = null;
          } else {
            this.cost = in.readInt();
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.units = null;
          } else {
            this.units = in.readInt();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










